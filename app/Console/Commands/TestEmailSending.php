<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Mail;
use App\Mail\MeetingMinutesSent;
use App\Models\Meeting;
use App\Models\User;
use Illuminate\Support\Facades\Log;

class TestEmailSending extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'test:email-sending 
                            {--meeting_id= : ID de la r√©union √† utiliser pour le test}
                            {--email= : Email de destination pour le test (d√©faut: test@example.com)}
                            {--type=minutes : Type de test (minutes, simple, notification)}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Test l\'envoi d\'emails avec Mailtrap pour v√©rifier la configuration';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üöÄ Test d\'envoi d\'emails avec Mailtrap');
        $this->newLine();

        // R√©cup√©rer les options
        $meetingId = $this->option('meeting_id');
        $testEmail = $this->option('email') ?: 'test@example.com';
        $testType = $this->option('type');

        // Afficher la configuration actuelle
        $this->info('üìß Configuration actuelle des emails :');
        $this->line('   Mailer: ' . config('mail.default'));
        $this->line('   Host: ' . config('mail.mailers.smtp.host'));
        $this->line('   Port: ' . config('mail.mailers.smtp.port'));
        $this->line('   Username: ' . config('mail.mailers.smtp.username'));
        $this->line('   Encryption: ' . config('mail.mailers.smtp.scheme'));
        $this->newLine();

        try {
            switch ($testType) {
                case 'minutes':
                    $this->testMeetingMinutesEmail($meetingId, $testEmail);
                    break;
                case 'simple':
                    $this->testSimpleEmail($testEmail);
                    break;
                case 'notification':
                    $this->testNotificationEmail($testEmail);
                    break;
                default:
                    $this->error('Type de test invalide. Utilisez: minutes, simple, ou notification');
                    return 1;
            }

            $this->newLine();
            $this->info('‚úÖ Test termin√© avec succ√®s !');
            $this->line('V√©rifiez votre bo√Æte Mailtrap pour voir l\'email re√ßu.');
            
        } catch (\Exception $e) {
            $this->error('‚ùå Erreur lors du test : ' . $e->getMessage());
            Log::error('Erreur test email', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            return 1;
        }

        return 0;
    }

    /**
     * Test d'envoi d'un email de compte rendu de r√©union
     */
    private function testMeetingMinutesEmail($meetingId, $testEmail)
    {
        $this->info('üìã Test d\'envoi d\'email de compte rendu de r√©union...');

        // R√©cup√©rer ou cr√©er une r√©union de test
        if ($meetingId) {
            $meeting = Meeting::find($meetingId);
            if (!$meeting) {
                throw new \Exception("R√©union avec l'ID {$meetingId} non trouv√©e");
            }
        } else {
            // Cr√©er une r√©union de test
            $meeting = Meeting::first();
            if (!$meeting) {
                throw new \Exception("Aucune r√©union trouv√©e dans la base de donn√©es");
            }
        }

        $this->line("   Utilisation de la r√©union: {$meeting->title} (ID: {$meeting->id})");

        // V√©rifier si la r√©union a des minutes
        if (!$meeting->minutes) {
            $this->warn("   ‚ö†Ô∏è  Cette r√©union n'a pas de compte rendu, cr√©ation d'un compte rendu de test...");
            
            // Cr√©er des minutes de test
            $meeting->minutes()->create([
                'content' => 'Compte rendu de test pour v√©rification des emails',
                'status' => 'draft',
                'difficulties' => 'Difficult√©s de test pour validation des champs obligatoires',
                'recommendations' => 'Recommandations de test pour validation des champs obligatoires',
            ]);
            
            $this->line("   ‚úÖ Compte rendu de test cr√©√©");
        }

        // Envoyer l'email
        $this->line("   üì§ Envoi de l'email √† {$testEmail}...");
        
        Mail::to($testEmail)->send(new MeetingMinutesSent($meeting));
        
        $this->info("   ‚úÖ Email de compte rendu envoy√© avec succ√®s !");
    }

    /**
     * Test d'envoi d'un email simple
     */
    private function testSimpleEmail($testEmail)
    {
        $this->info('üìß Test d\'envoi d\'email simple...');

        $this->line("   üì§ Envoi d'un email simple √† {$testEmail}...");

        Mail::raw('Ceci est un email de test pour v√©rifier la configuration Mailtrap.

Ceci est un email de test simple pour v√©rifier que la configuration des emails fonctionne correctement.

Si vous recevez cet email, la configuration Mailtrap est op√©rationnelle !', function ($message) use ($testEmail) {
            $message->to($testEmail)
                    ->subject('Test Email - Configuration Mailtrap');
        });

        $this->info("   ‚úÖ Email simple envoy√© avec succ√®s !");
    }

    /**
     * Test d'envoi d'une notification par email
     */
    private function testNotificationEmail($testEmail)
    {
        $this->info('üîî Test d\'envoi de notification par email...');

        // Cr√©er un utilisateur de test
        $testUser = User::firstOrCreate(
            ['email' => $testEmail],
            [
                'name' => 'Utilisateur Test',
                'password' => bcrypt('password'),
                'email_verified_at' => now(),
            ]
        );

        $this->line("   üë§ Utilisateur de test: {$testUser->name} ({$testUser->email})");

        // Envoyer une notification de test
        $this->line("   üì§ Envoi de la notification de test...");

        // Envoyer un email simple de test
        Mail::raw('Ceci est un email de test pour v√©rifier la configuration Mailtrap.', function ($message) use ($testEmail) {
            $message->to($testEmail)
                    ->subject('Test de notification - Configuration Mailtrap');
        });

        $this->info("   ‚úÖ Notification de test envoy√©e avec succ√®s !");
    }
}
